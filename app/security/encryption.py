from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes, padding
from cryptography.hazmat.backends import default_backend
import os

def generate_salt_iv():
    """
    G√©n√®re un Salt et un IV s√©curis√©s pour le chiffrement AES-GCM.

    üìå **Pourquoi ?**
    - **Salt (16 bytes)** : Utilis√© pour la d√©rivation de la cl√© AES (renforce la s√©curit√©).
    - **IV (12 bytes)** : Vecteur d'initialisation n√©cessaire pour AES-GCM (garantit l'unicit√© des op√©rations).

    üìå **Retourne :**
    - `salt` (bytes) : Une valeur al√©atoire de 16 octets.
    - `iv` (bytes) : Un vecteur d'initialisation de 12 octets.

    üîê **S√©curit√© :**
    - `os.urandom()` g√©n√®re des valeurs **cryptographiquement s√©curis√©es**.
    - AES-GCM exige un **IV unique** pour chaque chiffrement afin d'√©viter les failles.
    """

    salt = os.urandom(16)  # G√©n√®re un Salt al√©atoire (16B)
    iv = os.urandom(12)    # G√©n√®re un IV al√©atoire (12B) conforme √† AES-GCM

    return salt, iv

def generate_key(salt: bytes):
    """
    G√©n√®re une cl√© AES 256 bits √† partir d'un Salt via PBKDF2-HMAC.

    üìå **Pourquoi ?**
    - **PBKDF2-HMAC** est une fonction de d√©rivation de cl√© r√©sistante aux attaques par force brute.
    - L'utilisation d'un **Salt** emp√™che les attaques par pr√©-calcul (Rainbow Tables).

    üìå **Param√®tres :**
    - `salt` (bytes) : Une valeur al√©atoire (16 bytes) utilis√©e pour g√©n√©rer la cl√©.

    üìå **Retourne :**
    - `key` (bytes) : Une cl√© AES 256 bits (32 bytes) d√©riv√©e du Salt.

    üîê **S√©curit√© :**
    - `hashes.SHA256` garantit une fonction de hachage robuste.
    - **100,000 it√©rations** de PBKDF2 ralentissent les attaques par force brute.
    - G√©n√®re une cl√© **uniquement bas√©e sur le Salt**, donc toujours coh√©rente.
    """

    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),  # Algorithme de hachage robuste
        length=32,  # Cl√© AES 256 bits (32B)
        salt=salt,  # Utilisation du Salt unique pour √©viter les attaques Rainbow Table
        iterations=100000,  # Ralentit les attaques par brute-force
        backend=default_backend()
    )

    return kdf.derive(salt)  # Retourne la cl√© AES d√©riv√©e

# ‚úÖ Fonction de chiffrement
def encrypt_data(plaintext: str, salt: bytes, iv: bytes) -> bytes:
    """
    Chiffre une donn√©e avec AES-GCM et retourne les donn√©es sous la forme :
    `Salt + IV + Tag + Ciphertext`.

    üìå **Param√®tres :**
    - `plaintext` (str) : Texte en clair √† chiffrer.
    - `salt` (bytes) : Valeur al√©atoire utilis√©e pour g√©n√©rer la cl√© AES (16 bytes).
    - `iv` (bytes) : Vecteur d'initialisation pour AES-GCM (12 bytes).

    üìå **Retourne :**
    - `bytes` : Donn√©es chiffr√©es sous la forme **Salt (16B) + IV (12B) + Tag (16B) + Ciphertext**.

    üîê **S√©curit√© :**
    - Utilise **AES-256-GCM** pour un chiffrement **authentifi√©** et s√©curis√©.
    - Le **Tag d'authentification (16 bytes)** assure l'int√©grit√© des donn√©es chiffr√©es.
    - **Le Salt et l'IV doivent √™tre stock√©s** pour permettre le d√©chiffrement ult√©rieur.
    """

    # G√©n√©rer une cl√© AES 256 bits √† partir du Salt
    key = generate_key(salt)

    # Initialiser AES-GCM avec la cl√© et l'IV
    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Ajouter un padding s√©curis√© (PKCS7) avant chiffrement
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(plaintext.encode()) + padder.finalize()

    # Chiffrement des donn√©es avec AES-GCM
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()

    # Construire les donn√©es chiffr√©es : Salt (16B) + IV (12B) + Tag (16B) + Ciphertext
    encrypted_data = salt + iv + encryptor.tag + ciphertext

    return encrypted_data

def decrypt_data(encrypted_data: bytes, salt: bytes, iv: bytes) -> str:
    """
    D√©chiffre une donn√©e AES-GCM en utilisant le Salt, l'IV et le Tag stock√©s.

    üìå **Param√®tres :**
    - `encrypted_data` (bytes) : Donn√©es chiffr√©es au format **Salt + IV + Tag + Ciphertext**.
    - `salt` (bytes) : Valeur utilis√©e pour g√©n√©rer la cl√© AES (16 bytes).
    - `iv` (bytes) : Vecteur d'initialisation pour AES-GCM (12 bytes).

    üìå **Retourne :**
    - `str` : Donn√©es d√©chiffr√©es sous forme de texte en clair.

    üîê **S√©curit√© :**
    - Utilise **AES-256-GCM**, garantissant √† la fois **confidentialit√© et int√©grit√©** des donn√©es.
    - Le **Tag d'authentification (16 bytes)** est extrait et valid√© pour d√©tecter toute modification des donn√©es.
    - Si le d√©chiffrement √©choue (cl√© incorrecte, donn√©es alt√©r√©es), une **erreur est lev√©e**.
    """

    try:
        # Extraction du Tag (16 bytes) et du Ciphertext
        tag = encrypted_data[28:44]   # Tag d'authentification (16B)
        ciphertext = encrypted_data[44:]  # Donn√©es chiffr√©es

        # G√©n√©rer la cl√© AES √† partir du Salt
        key = generate_key(salt)

        # Initialiser AES-GCM avec la cl√©, l'IV et le Tag
        cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())
        decryptor = cipher.decryptor()

        # D√©chiffrer les donn√©es
        decrypted_padded_data = decryptor.update(ciphertext) + decryptor.finalize()

        # Suppression du padding s√©curis√© (PKCS7)
        unpadder = padding.PKCS7(128).unpadder()
        decrypted_data = unpadder.update(decrypted_padded_data) + unpadder.finalize()

        return decrypted_data.decode()

    except Exception:
        # Lever une erreur en cas d'√©chec du d√©chiffrement
        raise ValueError("‚ùå Erreur lors du d√©chiffrement : donn√©es corrompues ou cl√© incorrecte.")
    
