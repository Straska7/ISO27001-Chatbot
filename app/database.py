"""
database.py - Configuration de la base de donn√©es SQLAlchemy (asynchrone)

üìå Ce fichier configure :
    - Le chargement des variables d'environnement (DATABASE_URL)
    - L'initialisation du moteur de base de donn√©es asynchrone
    - La cr√©ation de sessions de base de donn√©es pour les requ√™tes
    - L'int√©gration avec SQLAlchemy pour la gestion des mod√®les
"""
import os
from dotenv import load_dotenv
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# ‚úÖ Chargement des variables d‚Äôenvironnement
load_dotenv()

# ‚úÖ V√©rification et r√©cup√©ration de l'URL de la base de donn√©es
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL est introuvable dans .env ! V√©rifie ta configuration.")
# ‚úÖ Cr√©ation du moteur de base de donn√©es asynchrone
engine = create_async_engine(DATABASE_URL, echo=False)

# ‚úÖ Configuration des sessions de base de donn√©es
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)

# ‚úÖ D√©finition de la base pour SQLAlchemy (corrige l'erreur ImportError dans Alembic)
Base = declarative_base()

# ‚úÖ D√©pendance pour r√©cup√©rer une session de base de donn√©es
async def get_db():
    """
    Fournit une session de base de donn√©es asynchrone pour ex√©cuter des requ√™tes.

    Utilisation :
        - `db: AsyncSession = Depends(get_db)`

    Cette fonction est utilis√©e dans les routes FastAPI pour injecter une session de base de donn√©es.
    """
    async with SessionLocal() as session:
        yield session